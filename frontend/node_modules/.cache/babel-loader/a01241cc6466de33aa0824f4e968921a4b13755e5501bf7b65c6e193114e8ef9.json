{"ast":null,"code":"var _jsxFileName = \"/workspaces/vc_Bot/frontend/src/components/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { useWebSocket } from \"../hooks/useWebSocket\";\nimport \"./ChatBox.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = ({\n  transcript,\n  setTranscript,\n  setResponseAudio\n}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const audioRecorderRef = useRef(null);\n  const {\n    sendAudio\n  } = useWebSocket(\"https://fantastic-funicular-rp9vpwrw5pp25pp4-8000.app.github.dev/api/v1/chat/\");\n  const handleStartListening = async () => {\n    setIsListening(true);\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.start();\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          console.log(\"Recording available:\", event.data);\n          // Send audio data to the WebSocket\n          // sendAudio(event.data);\n        }\n      };\n      console.log(\"Recording started\");\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n  const handleStopListening = async () => {\n    setIsListening(false);\n\n    // Replace this with the logic to capture audio data from your recorder\n    const audioBlob = new Blob(); // Example placeholder\n    console.log(\"AudioBlob:\", audioBlob);\n    try {\n      const serverResponse = await sendAudio(audioBlob);\n      if (serverResponse.error) {\n        console.error(\"Server Error:\", serverResponse.error);\n      } else {\n        setTranscript(prev => [...prev, serverResponse.user_text]);\n        setResponseAudio(serverResponse.audio);\n      }\n    } catch (error) {\n      console.error(\"Error sending audio:\", error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isListening ? handleStopListening : handleStartListening,\n      children: isListening ? \"Stop Listening\" : \"Start Listening\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatBox, \"2zXwoJ1XUQfhh7la8Rw/PvPrMrA=\", false, function () {\n  return [useWebSocket];\n});\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useRef","useWebSocket","jsxDEV","_jsxDEV","ChatBox","transcript","setTranscript","setResponseAudio","_s","isListening","setIsListening","audioRecorderRef","sendAudio","handleStartListening","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorderRef","current","MediaRecorder","start","ondataavailable","event","data","size","console","log","error","handleStopListening","audioBlob","Blob","serverResponse","prev","user_text","message","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/vc_Bot/frontend/src/components/ChatBox.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { useWebSocket } from \"../hooks/useWebSocket\";\nimport \"./ChatBox.css\";\n\nconst ChatBox = ({ transcript, setTranscript, setResponseAudio }) => {\n    const [isListening, setIsListening] = useState(false);\n    const audioRecorderRef = useRef(null);\n\n    const { sendAudio } = useWebSocket(\"https://fantastic-funicular-rp9vpwrw5pp25pp4-8000.app.github.dev/api/v1/chat/\");\n\n    const handleStartListening = async () => {\n        setIsListening(true);\n\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            mediaRecorderRef.current = new MediaRecorder(stream);\n            mediaRecorderRef.current.start();\n\n            mediaRecorderRef.current.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                    console.log(\"Recording available:\", event.data);\n                    // Send audio data to the WebSocket\n                    // sendAudio(event.data);\n                }\n            };\n\n            console.log(\"Recording started\");\n        } catch (error) {\n            console.error(\"Error accessing microphone:\", error);\n        }\n    };\n\n    const handleStopListening = async () => {\n        setIsListening(false);\n    \n        // Replace this with the logic to capture audio data from your recorder\n        const audioBlob = new Blob(); // Example placeholder\n        console.log(\"AudioBlob:\", audioBlob);\n    \n        try {\n            const serverResponse = await sendAudio(audioBlob);\n    \n            if (serverResponse.error) {\n                console.error(\"Server Error:\", serverResponse.error);\n            } else {\n                setTranscript((prev) => [...prev, serverResponse.user_text]);\n                setResponseAudio(serverResponse.audio);\n            }\n        } catch (error) {\n            console.error(\"Error sending audio:\", error.message);\n        }\n    };\n\n    return (\n        <div className=\"chat-box\">\n            <button onClick={isListening ? handleStopListening : handleStartListening}>\n                {isListening ? \"Stop Listening\" : \"Start Listening\"}\n            </button>\n        </div>\n    );\n};\n\nexport default ChatBox;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SAASC,YAAY,QAAQ,uBAAuB;AACpD,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAC;EAAEC,UAAU;EAAEC,aAAa;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMY,gBAAgB,GAAGX,MAAM,CAAC,IAAI,CAAC;EAErC,MAAM;IAAEY;EAAU,CAAC,GAAGX,YAAY,CAAC,+EAA+E,CAAC;EAEnH,MAAMY,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrCH,cAAc,CAAC,IAAI,CAAC;IAEpB,IAAI;MACA,MAAMI,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzEC,gBAAgB,CAACC,OAAO,GAAG,IAAIC,aAAa,CAACP,MAAM,CAAC;MACpDK,gBAAgB,CAACC,OAAO,CAACE,KAAK,CAAC,CAAC;MAEhCH,gBAAgB,CAACC,OAAO,CAACG,eAAe,GAAIC,KAAK,IAAK;QAClD,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACrBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,KAAK,CAACC,IAAI,CAAC;UAC/C;UACA;QACJ;MACJ,CAAC;MAEDE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpCpB,cAAc,CAAC,KAAK,CAAC;;IAErB;IACA,MAAMqB,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9BL,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEG,SAAS,CAAC;IAEpC,IAAI;MACA,MAAME,cAAc,GAAG,MAAMrB,SAAS,CAACmB,SAAS,CAAC;MAEjD,IAAIE,cAAc,CAACJ,KAAK,EAAE;QACtBF,OAAO,CAACE,KAAK,CAAC,eAAe,EAAEI,cAAc,CAACJ,KAAK,CAAC;MACxD,CAAC,MAAM;QACHvB,aAAa,CAAE4B,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,cAAc,CAACE,SAAS,CAAC,CAAC;QAC5D5B,gBAAgB,CAAC0B,cAAc,CAACf,KAAK,CAAC;MAC1C;IACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACO,OAAO,CAAC;IACxD;EACJ,CAAC;EAED,oBACIjC,OAAA;IAAKkC,SAAS,EAAC,UAAU;IAAAC,QAAA,eACrBnC,OAAA;MAAQoC,OAAO,EAAE9B,WAAW,GAAGqB,mBAAmB,GAAGjB,oBAAqB;MAAAyB,QAAA,EACrE7B,WAAW,GAAG,gBAAgB,GAAG;IAAiB;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACnC,EAAA,CAxDIJ,OAAO;EAAA,QAIaH,YAAY;AAAA;AAAA2C,EAAA,GAJhCxC,OAAO;AA0Db,eAAeA,OAAO;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}