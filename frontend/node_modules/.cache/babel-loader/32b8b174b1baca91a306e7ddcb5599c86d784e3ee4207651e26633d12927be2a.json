{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useEffect } from \"react\";\nexport const useWebSocket = url => {\n  _s();\n  const socketRef = useRef(null);\n  useEffect(() => {\n    socketRef.current = new WebSocket(url);\n    socketRef.current.onopen = () => console.log(\"WebSocket connection established.\");\n    socketRef.current.onclose = () => console.log(\"WebSocket connection closed.\");\n    return () => {\n      socketRef.current.close();\n    };\n  }, [url]);\n  const sendAudio = audioBlob => {\n    return new Promise((resolve, reject) => {\n      if (socketRef.current.readyState === WebSocket.OPEN) {\n        socketRef.current.send(audioBlob);\n        socketRef.current.onmessage = event => {\n          resolve(JSON.parse(event.data));\n        };\n        socketRef.current.onerror = error => {\n          reject(error);\n        };\n      } else {\n        reject(new Error(\"WebSocket is not open.\"));\n      }\n    });\n  };\n  return {\n    sendAudio\n  };\n};\n_s(useWebSocket, \"8c0rAI93JE8jpOVTnobt43KkFfY=\");","map":{"version":3,"names":["useRef","useEffect","useWebSocket","url","_s","socketRef","current","WebSocket","onopen","console","log","onclose","close","sendAudio","audioBlob","Promise","resolve","reject","readyState","OPEN","send","onmessage","event","JSON","parse","data","onerror","error","Error"],"sources":["/workspaces/vc_Bot/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useRef, useEffect } from \"react\";\n\nexport const useWebSocket = (url) => {\n    const socketRef = useRef(null);\n\n    useEffect(() => {\n        socketRef.current = new WebSocket(url);\n\n        socketRef.current.onopen = () => console.log(\"WebSocket connection established.\");\n        socketRef.current.onclose = () => console.log(\"WebSocket connection closed.\");\n\n        return () => {\n            socketRef.current.close();\n        };\n    }, [url]);\n\n    const sendAudio = (audioBlob) => {\n        return new Promise((resolve, reject) => {\n            if (socketRef.current.readyState === WebSocket.OPEN) {\n                socketRef.current.send(audioBlob);\n\n                socketRef.current.onmessage = (event) => {\n                    resolve(JSON.parse(event.data));\n                };\n\n                socketRef.current.onerror = (error) => {\n                    reject(error);\n                };\n            } else {\n                reject(new Error(\"WebSocket is not open.\"));\n            }\n        });\n    };\n\n    return { sendAudio };\n};"],"mappings":";AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAEzC,OAAO,MAAMC,YAAY,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACjC,MAAMC,SAAS,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACZI,SAAS,CAACC,OAAO,GAAG,IAAIC,SAAS,CAACJ,GAAG,CAAC;IAEtCE,SAAS,CAACC,OAAO,CAACE,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IACjFL,SAAS,CAACC,OAAO,CAACK,OAAO,GAAG,MAAMF,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAE7E,OAAO,MAAM;MACTL,SAAS,CAACC,OAAO,CAACM,KAAK,CAAC,CAAC;IAC7B,CAAC;EACL,CAAC,EAAE,CAACT,GAAG,CAAC,CAAC;EAET,MAAMU,SAAS,GAAIC,SAAS,IAAK;IAC7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,IAAIZ,SAAS,CAACC,OAAO,CAACY,UAAU,KAAKX,SAAS,CAACY,IAAI,EAAE;QACjDd,SAAS,CAACC,OAAO,CAACc,IAAI,CAACN,SAAS,CAAC;QAEjCT,SAAS,CAACC,OAAO,CAACe,SAAS,GAAIC,KAAK,IAAK;UACrCN,OAAO,CAACO,IAAI,CAACC,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC;QACnC,CAAC;QAEDpB,SAAS,CAACC,OAAO,CAACoB,OAAO,GAAIC,KAAK,IAAK;UACnCV,MAAM,CAACU,KAAK,CAAC;QACjB,CAAC;MACL,CAAC,MAAM;QACHV,MAAM,CAAC,IAAIW,KAAK,CAAC,wBAAwB,CAAC,CAAC;MAC/C;IACJ,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IAAEf;EAAU,CAAC;AACxB,CAAC;AAACT,EAAA,CAjCWF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}